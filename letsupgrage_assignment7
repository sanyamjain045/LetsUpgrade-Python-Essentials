#python function for finding a prime using unittest library

__author__ = 'Cris'
import unittest
class EvenFactorial(unittest.TestCase):

    def is_prime(self, n):
        pass

    def test_is_prime_1(self):
        self.assertTrue(self.is_prime(1))

    def test_is_prime_2(self):
        self.assertTrue(self.is_prime(2))

    def test_is_prime_3(self):
        self.assertTrue(self.is_prime(3))

    def test_is_prime_4(self):
        self.assertFalse(self.is_prime(4))

    def test_is_prime_5(self):
        self.assertTrue(self.is_prime(5))

    def test_is_prime_6(self):
        self.assertTrue(self.is_prime(97))

    def test_is_prime_7(self):
        self.assertFalse(self.is_prime(100))
if __name__ == '__main__':
    unittest.main()

    
    
    
#python function for finding a prime using pyLint library
import math


def is_factor(numerator, denominator):
    '''Return true if numerator is evenly divisible by denominator'''
    if numerator % denominator == 0:
        return True
    else:
        return False


def is_even(number):
    '''Return true if numerator is evenly divisible by 2'''
    return is_factor(number, 2)


def odds_to(maximum):
    '''Return odd numbers up to maximum'''
    number = 3
    while number <= maximum:
        yield number
        number += 2


def get_factor(number):
    '''
    Return the lowest factor of number.
    If number is prime, return 0
    '''
    if is_even(number):
        return 2
    else:
        top = int(math.sqrt(number))
        for odd_number in odds_to(top):
            if is_factor(number, odd_number):
                return odd_number
        return 0


def get_number():
    '''Return the value of Mersenne 67'''
    # number = 11
    # number = 6
    # number = 15
    number = 2 ** 67 - 1
    return number


def main():
    '''Main function'''
    number = get_number()
    factor = get_factor(number)

    if factor == 0:
        print("%d is prime" % number)
    else:
        print("%d is not prime (e.g. factor=%d)" % (number, factor))

main()

#make a small generating program for returning armstrong number between 1-1000 in a generator number


# python3 >= 3.6 for typehint support 
# This example avoids the complexity of ordering 
# through type conversions & string manipulation 

def isArmstrong(val:int) -> bool: 
	
	"""val will be tested to see if its an Armstrong number. 
	Arguments: 
		val {int} -- positive integer only. 
	Returns: 
		bool -- true is /false isn't 
	"""
	
	# break the int into its respective digits 
	parts = [int(_) for _ in str(val)] 
	
	# begin test. 
	counter = 0
	for _ in parts: 
		counter += _**3
	return ( counter == val ) 

# Check Armstrong number 
#print(isArmstrong(100)) 

#print(isArmstrong(153)) 

# Get all the Armstrong number in range(1000) 
print([ _ for _ in range(1000) if isArmstrong(_)]) 







	
