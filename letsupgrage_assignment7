#python function for finding a prime using unittest library

__author__ = 'Cris'

import unittest


class PrimeNumbers(unittest.TestCase):

    def is_prime(self, n):
        pass

    def obtain_prime_factors(self, n):
        pass

    def test_is_prime_1(self):
        self.assertTrue(self.is_prime(1))

    def test_is_prime_2(self):
        self.assertTrue(self.is_prime(2))

    def test_is_prime_3(self):
        self.assertTrue(self.is_prime(3))

    def test_is_prime_4(self):
        self.assertFalse(self.is_prime(4))

    def test_is_prime_5(self):
        self.assertTrue(self.is_prime(5))

    def test_is_prime_6(self):
        self.assertTrue(self.is_prime(97))

    def test_is_prime_7(self):
        self.assertFalse(self.is_prime(100))

    def test_get_primes_1(self):
        self.assertEqual(self.obtain_prime_factors(0), [])

    def test_get_primes_2(self):
        self.assertEqual(self.obtain_prime_factors(1), [1])

    def test_get_primes_3(self):
        self.assertEqual(self.obtain_prime_factors(2), [1, 2])

    def test_get_primes_4(self):
        self.assertEqual(self.obtain_prime_factors(3), [1, 3])

    def test_get_primes_5(self):
        self.assertEqual(self.obtain_prime_factors(4), [1, 2, 2])

    def test_get_primes_6(self):
        self.assertEqual(self.obtain_prime_factors(10), [1, 2, 5.0])

    def test_get_primes_7(self):
        self.assertEqual(self.obtain_prime_factors(24), [1, 2, 2, 2, 3.0])

    def test_get_primes_8(self):
        self.assertEqual(self.obtain_prime_factors(100), [1, 2, 2, 5, 5])

    def test_get_primes_9(self):
        self.assertEqual(self.obtain_prime_factors(523589), [1, 11, 47599.0])

    def test_get_primes_10(self):
        self.assertEqual(self.obtain_prime_factors(2568692), [1, 2, 2, 7, 199, 461.0])


if __name__ == '__main__':
    unittest.main()
	
